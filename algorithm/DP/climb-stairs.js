/**
 * 爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数。

第一步：状态定义
dp[i] 表示的含义:到第i阶方案数

第二步： 确定状态转移方程
到第i阶梯有两种方式
第一种, 从i-1向上走一步即可
第二中，从i-2向上走二步即可
所以 dp[i] = dp[i-1] + dp[i-2]

第三步,初始化状态，dp数组
dp[1] = 1,dp[2] = 2

 */

function climbStairs(n) {
  let dp = [];

  dp[1] = 1;
  dp[2] = 2;

  for (let i = 3; i <= n; i ++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }

  return dp[n];
}
